options:
	path: "../../../../../../src/test/skript/tests/syntaxes/expressions/"
	misc: "../../../../../../src/test/skript/tests/misc/"

	# Princess test script is in another castle, Mario!
	# paths are relativised to the /scripts/ directory
	# but we are loading these scripts from the test folder :(

using script reflection

function testEffRun0():
	set {EffRun} to true

local function testEffRun1():
	set {EffRun} to true

test "run functions":
	delete {EffRun}
	set {_function} to function "testEffRun0()"
	run {_function}
	assert {EffRun} is true with "function didn't run"

	delete {EffRun}
	set {_function} to function "testEffRun1()"
	run {_function}
	assert {EffRun} is true with "local function didn't run"
	delete {EffRun}

test "run external functions":
	set {_script} to the script named {@misc} + "dummy.sk"
	set {_function} to function "testDummy()" from {_script}
	assert {_function} exists with "function wasn't found"
	run {_function} # does nothing, just fishing for errors :)

	set {_script} to the script named {@path} + "ExprFunction.sk"
	delete {ExprFunction}

	set {_function} to function "testExprFunction0()" from {_script}
	assert {_function} exists with "function wasn't found"
	run {_function}
	assert {ExprFunction} is true with "function didn't run"
	delete {ExprFunction}

	set {_function} to function "testExprFunction1()" from {_script}
	assert {_function} exists with "function wasn't found"
	run {_function}
	assert {ExprFunction} is true with "function didn't run"
	delete {ExprFunction}

	set {_function} to function "testExprFunction2()" from {_script}
	assert {_function} exists with "function wasn't found"
	run {_function} with arguments "hello" and 0
	assert {ExprFunction} is true with "function with args didn't run"
	delete {ExprFunction}

	set {_function} to function "testExprFunction3()" from {_script}
	assert {_function} exists with "function wasn't found"
	run {_function}
	assert {ExprFunction} is true with "external local function didn't run"
	delete {ExprFunction}

test "run variable runnable with delay":
	set {_a} to 1
	set {_runnable} to a new runnable:
		assert {_a} is 1 with "Local variable 'a' should keep context from before the variable runnable section is instantiated"
		assert {_b} is not set with "Local variable 'b' should not be present as it's created after the execution of this variable runnable"
		add 1 to {_a}
		assert {_a} is 2 with "Local variable 'a' should still be changeable within this variable runnable"
		set {_c} to 4
	execute {_runnable} after 1 tick
	set {_b} to 3
	assert {_a} is 1 with "Local variable 'a' should keep context from only this event and not be changed from within the variable runnable"
	assert {_c} is not set with "Local variable 'c' should not be present as it's created within the variable runnable and should not be transferred outside of it"

test "run inlined runnable with delay":
	set {_a} to 1
	after 1 tick execute a new runnable:
		assert {_a} is 1 with "Local variable 'a' should keep context from before the inlined runnable section is instantiated"
		assert {_b} is not set with "Local variable 'b' should not be present as it's created after the execution of this inlined runnable"
		add 1 to {_a}
		assert {_a} is 2 with "Local variable 'a' should still be changeable with this inlined runnable"
		set {_c} to 4
	set {_b} to 3
	assert {_a} is 1 with "Local variable 'a' should keep context from only this event and not be changed from within the inlined runnable"
	assert {_c} is not set with "Local variable 'c' should not be present as it's created within the inlined runnable and should not be transferred outside of it"
