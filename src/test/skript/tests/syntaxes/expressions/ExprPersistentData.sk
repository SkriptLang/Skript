test "persistent data expression/condition" when minecraft version is "1.15.2":

	# Test entities holding persistent data
	# Note: the variable names are odd to test that using characters not valid for a NamespacedKey don't throw an error
	# That is achieved by encoding the variable names in Base64

	spawn a chicken at spawn of world "world"
	assert last spawned chicken doesn't have persistent data value {cool+io man} with "(Condition) Entities should not have a persistent tag before it is set"
	set persistent data value {cool+io man} of last spawned chicken to true
	assert persistent data value {cool+io man} of last spawned chicken = true with "(Expression) The persistent tag was set to be true, but it is not"
	assert last spawned chicken has persistent data value {cool+io man} with "(Condition) Entities should have a persistent tag if it is set"
	clear persistent data value {cool+io man} of last spawned chicken
	assert last spawned chicken doesn't have persistent data value {cool+io man} with "(Condition) Entities should not have a persistent tag after it is cleared"
	delete last spawned chicken

	# Test blocks holding a serializable value

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"
	assert {_block} doesn't have persistent data value {enchantment} with "(Condition) Blocks should not have a persistent tag before it is set"
	set persistent data value {enchantment} of {_block} to sharpness 10
	assert persistent data value {enchantment} of {_block} = sharpness 10 with "(Expression) The persistent tag was set to be sharpness 10, but it is not"
	assert {_block} has persistent data value {enchantment} with "(Condition) Blocks should have a persistent tag if it is set"
	clear persistent data value {enchantment} of {_block}
	assert {_block} doesn't have persistent data value {enchantment} with "(Condition) Blocks should not have a persistent tag after it is cleared"
	set block at spawn of world "world" to air

	# Test entities holding a non-serializable value

	spawn a pig at spawn of world "world"
	assert last spawned pig doesn't have persistent data value {me} with "(Condition) Entities should not have a persistent tag before it is set (Non-serializable Test)"
	set persistent data value {me} of last spawned pig to last spawned pig
	assert persistent data value {me} of last spawned pig = last spawned pig with "(Expression) The persistent tag was set, but it is not (Non-serializable Test)"
	assert last spawned pig has persistent data value {me} with "(Condition) Entities should have a persistent tag if it is set (Non-serializable Test)"
	clear persistent data value {me} of last spawned pig
	assert last spawned pig doesn't have persistent data value {me} with "(Condition) Entities should not have a persistent tag after it is cleared (Non-serializable Test)"
	delete last spawned pig

	# Test using list variables (Serializable)

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"
	assert {_block} doesn't have persistent data value {enchantment::sharpness} with "(Condition) Blocks should not have a persistent tag before it is set (List Test)"
	set persistent data value {enchantment::sharpness} of {_block} to sharpness 10
	assert persistent data value {enchantment::sharpness} of {_block} = sharpness 10 with "(Expression) The persistent tag was set to be sharpness 10, but it is not (List Test)"
	assert persistent data value {enchantment::*} of {_block} = sharpness 10 with "(Expression) The full list should be just sharpness 10, but it is not (List Test)"
	assert {_block} doesn't have persistent data value {enchantment::smite} with "(Condition) Blocks should not have a persistent tag if the index was not set (List Test)"
	assert {_block} has persistent data value {enchantment::sharpness} with "(Condition) Blocks should have a persistent tag if it is set (List Test)"
	clear persistent data value {enchantment::sharpness} of {_block}
	assert {_block} doesn't have persistent data value {enchantment::sharpness} with "(Condition) Blocks should not have a persistent tag after it is cleared (List Test)"
	set block at spawn of world "world" to air

	# Test using list variables (Non-serializable)

	spawn a pig at spawn of world "world"
	assert last spawned pig doesn't have persistent data value {me::1} and {me::2} with "(Condition) Entities should not have a persistent tag before it is set (Non-serializable List Test)"
	set persistent data value {me::1} of last spawned pig to last spawned pig
	assert persistent data value {me::1} of last spawned pig = last spawned pig with "(Expression) The persistent tag was set, but it is not (Non-serializable List Test)"
	assert persistent data value {me::*} of last spawned pig = last spawned pig with "(Expression) The full list should be just the last spawned pig, but it is not (Non-serializable List Test)"
	assert last spawned pig doesn't have persistent data value {me::2} with "(Condition) Entities should not have a persistent tag if the index was not set (Non-serializable List Test)"
	assert last spawned pig has persistent data value {me::1} with "(Condition) Entities should have a persistent tag if it is set (Non-serializable List Test)"
	clear persistent data value {me::1} of last spawned pig
	assert last spawned pig doesn't have persistent data value {me::1} and {me::2} with "(Condition) Entities should not have a persistent tag after it is cleared (Non-serializable List Test)"
	delete last spawned pig

	# Test add, remove, remove all (Serializable)

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"

	set persistent data value {change::*} of {_block} to {_block} and sharpness 5
	assert persistent data value {change::*} of {_block} contains ({_block} and sharpness 5) with "(Expression) The list was set, but it does not contain the set values (Changer Test)"
	remove sharpness 5 from persistent data value {change::*} of {_block}
	assert persistent data value {change::*} of {_block} = {_block} with "(Expression) The enchantment was removed from the list, but it is still in it (Changer Test)"
	add sharpness 5 and protection 4 to persistent data value {change::*} of {_block}
	assert persistent data value {change::*} of {_block} contains ({_block}, sharpness 5, and protection 4) with "(Expression) Enchanments were added to the list, but they are not present (%persistent data value {change::*} of {_block}%) (Changer Test)"
	remove all enchantment types from persistent data value {change::*} of {_block}
	assert persistent data value {change::*} of {_block} = {_block} with "(Expression) The enchantments were removed from the list, but it still contains them (%persistent data value {change::*} of {_block}%) (Changer Test)"

	set block at spawn of world "world" to air

	# Test add, remove, remove all (Non-serializable)

	spawn a pig at spawn of world "world"
	set {_pig} to the last spawned pig
	spawn a cow at spawn of world "world"
	set {_cow1} to the last spawned cow
	spawn a cow at spawn of world "world"
	set {_cow2} to the last spawned cow

	set persistent data value {change::*} of {_pig} to {_pig} and {_cow1}
	assert persistent data value {change::*} of {_pig} contains ({_pig} and {_cow1}) with "(Expression) The list was set, but it does not contain the set values (Non-serializable Changer Test)"
	remove {_cow1} from persistent data value {change::*} of {_pig}
	assert persistent data value {change::*} of {_pig} = {_pig} with "(Expression) The cow was removed from the list, but it is still in it (Non-serializable Changer Test)"
	add {_cow1} and {_cow2} to persistent data value {change::*} of {_pig}
	assert persistent data value {change::*} of {_pig} contains ({_pig}, {_cow1}, and {_cow2}) with "(Expression) Cows were added to the list, but they are not present (Non-serializable Changer Test)"
	remove all cows from persistent data value {change::*} of {_pig}
	assert persistent data value {change::*} of {_pig} = {_pig} with "(Expression) The cows were removed from the list, but it still contains them (Non-serializable Changer Test)"

	clear persistent data {change::*} of {_pig}
	delete {_pig}, {_cow1}, and {_cow2}

	# Test adding and removing numbers

	set block at spawn of world "world" to a campfire
	set {_block} to block at spawn of world "world"

	set persistent data value {number} of {_block} to 10
	assert persistent data value {number} of {_block} = 10 with "(Expression) The persistent tag was set to 10, but it is not (Numbers Test)"
	add 10.5 to persistent data value {number} of {_block}
	assert persistent data value {number} of {_block} = 20.5 with "(Expression) 10 was added to the persistent tag, but it is not 20.5 (Numbers Test)"
	remove 10 from persistent data value {number} of {_block}
	assert persistent data value {number} of {_block} = 10.5 with "(Expression) 10 was removed from the amount, but it is not 10.5 (Numbers Test)"
	clear persistent data {number} of {_block}
	assert {_block} doesn't have persistent data value {number} with "(Condition) The persistent tag was removed, but the block still has it (Numbers Test)"

	set block at spawn of world "world" to air
