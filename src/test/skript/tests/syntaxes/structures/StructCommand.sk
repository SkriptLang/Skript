options:
	command: skriptcommand

command {@command} <text> [<text>] [<itemtype = %dirt named "steve"%>]:
	trigger:
		set {_arg1} to arg-1
		assert {_arg1} is "taco" with "arg-1 test failed (got '%{_arg1}%')"
		set {_arg2} to arg-2
		assert {_arg2} is not set with "arg-2 test failed (got '%{_arg2}%')"
		set {_arg3} to arg-3
		assert {_arg3} is dirt named "steve" with "arg-3 test failed (got '%{_arg3}%')"

command //somecommand [<text>]:
	trigger:
		set {_arg1} to arg-1
		if {_arg1} is set:
			assert {_arg1} is "burrito is tasty" with "arg-1 is 'burrito is tasty' test failed (got '%{_arg1}%')"

# see https://github.com/SkriptLang/Skript/pull/6286
command /commandtest <string="player">:
	trigger:
		stop

test "commands":
	execute command "skriptcommand taco"
	execute command "//somecommand burrito is tasty"

using local variable type hints

parse:
	results: {StructCommand::hints::1::*}
	code:
		command /hint_test_1 <x:number>:
			trigger:
				set {_a} to {_x} in lowercase

parse:
	results: {StructCommand::hints::2::*}
	code:
		command /hint_test_2 <x:numbers>:
			trigger:
				set {_a::*} to {_x::*} in lowercase

test "command structure type hints":
	assert {StructCommand::hints::1::*} is "Expected variable '{_x}' to be a text, but it is a number" with "Hint failed (%{StructCommand::hints::1::*}%)"
	assert {StructCommand::hints::2::*} is "Expected variable '{_x::*}' to be a text, but it is a number" with "Hint failed (%{StructCommand::hints::2::*}%)"

