
local function setSuperTypes(data: entity types):
	set {-SuperTypes::*} to {_data::*}

local function testData(data: entity type):
	set {testDataSave} to {_data} # Ensure serialization does not error
	clear {testDataSave}
	if {_data} is spawnable in world "world":
		spawn {_data} at test-location:
			set {_entity} to entity
		assert {_entity} is set with "Could not spawn '%{_data}%'"
		assert {_entity} is {_data} with "Spawned '%{_data}%' should match against its own EntityData"
	loop {-SuperTypes::*}:
		assert {_data} is loop-value with "EntityData '%{_data}%' should match against EntityData '%loop-value%'"
		if {_entity} is set:
			assert {_entity} is loop-value with "Spawned '%{_data}%' should match against EntityData '%loop-value%'"
	clear entity within {_entity}
	clear {_entity}

test "axolotl data":
	setSuperTypes(axolotl)
	testData(axolotl)
	testData(lucy axolotl)
	testData(wild axolotl)
	testData(gold axolotl)
	testData(cyan axolotl)
	testData(blue axolotl)

	setSuperTypes(axolotl, baby axolotl)
	testData(baby axolotl)
	testData(baby lucy axolotl)
	testData(baby wild axolotl)
	testData(baby gold axolotl)
	testData(baby cyan axolotl)
	testData(baby blue axolotl)

	setSuperTypes(axolotl, adult axolotl)
	testData(adult axolotl)
	testData(adult lucy axolotl)
	testData(adult wild axolotl)
	testData(adult gold axolotl)
	testData(adult cyan axolotl)
	testData(adult blue axolotl)

	setSuperTypes(axolotl, axolotl kid, baby axolotl)
	testData(axolotl kid)
	testData(lucy axolotl kid)
	testData(wild axolotl kid)
	testData(gold axolotl kid)
	testData(cyan axolotl kid)
	testData(blue axolotl kid)

test "bee data":
	setSuperTypes(bee)
	testData(bee)
	testData(bee without nectar)
	testData(bee with nectar)
	testData(happy bee)
	testData(happy bee without nectar)
	testData(happy bee with nectar)
	testData(angry bee)
	testData(angry bee without nectar)
	testData(angry bee with nectar)

	setSuperTypes(bee, baby bee)
	testData(baby bee)
	testData(baby bee without nectar)
	testData(baby bee with nectar)
	testData(baby happy bee)
	testData(baby happy bee without nectar)
	testData(baby happy bee with nectar)
	testData(baby angry bee)
	testData(baby angry bee without nectar)
	testData(baby angry bee with nectar)

	setSuperTypes(bee, adult bee)
	testData(adult bee)
	testData(adult bee without nectar)
	testData(adult bee with nectar)
	testData(adult happy bee)
	testData(adult happy bee without nectar)
	testData(adult happy bee with nectar)
	testData(adult angry bee)
	testData(adult angry bee without nectar)
	testData(adult angry bee with nectar)

	setSuperTypes(bee with nectar)
	testData(bee with nectar)
	testData(happy bee with nectar)
	testData(angry bee with nectar)

	setSuperTypes(bee without nectar)
	testData(bee without nectar)
	testData(happy bee without nectar)
	testData(angry bee without nectar)

	setSuperTypes(happy bee)
	testData(happy bee)
	testData(happy bee without nectar)
	testData(happy bee with nectar)

	setSuperTypes(angry bee)
	testData(angry bee)
	testData(angry bee without nectar)
	testData(angry bee with nectar)

test "boat data":
	setSuperTypes(any chest boat)
	testData(chest boat)
	testData(acacia chest boat)
	testData(bamboo chest boat)
	testData(birch chest boat)
	testData(cherry chest boat)
	testData(dark oak chest boat)
	testData(jungle chest boat)
	testData(mangrove chest boat)
	testData(oak chest boat)
	testData(spruce chest boat)
	parse if running minecraft "1.21.2":
		testData(pale oak chest boat)

test "boat data":
	setSuperTypes(any boat)
	testData(boat)
	testData(acacia boat)
	testData(bamboo boat)
	testData(birch boat)
	testData(cherry boat)
	testData(dark oak boat)
	testData(jungle boat)
	testData(mangrove boat)
	testData(oak boat)
	testData(spruce boat)
	parse if running minecraft "1.21.2":
		testData(pale oak boat)

test "cat data":
	setSuperTypes(cat)
	testData(cat)
	testData(tabby cat)
	testData(black cat)
	testData(red cat)
	testData(siamese cat)
	testData(british shorthair cat)
	testData(calico cat)
	testData(persian cat)
	testData(ragdoll cat)
	testData(white cat)
	testData(jellie cat)
	testData(all black cat)

	setSuperTypes(cat, baby cat)
	testData(baby cat)
	testData(baby tabby cat)
	testData(baby black cat)
	testData(baby red cat)
	testData(baby siamese cat)
	testData(baby british shorthair cat)
	testData(baby calico cat)
	testData(baby persian cat)
	testData(baby ragdoll cat)
	testData(baby white cat)
	testData(baby jellie cat)
	testData(baby all black cat)

	setSuperTypes(cat, adult cat)
	testData(adult cat)
	testData(adult tabby cat)
	testData(adult black cat)
	testData(adult red cat)
	testData(adult siamese cat)
	testData(adult british shorthair cat)
	testData(adult calico cat)
	testData(adult persian cat)
	testData(adult ragdoll cat)
	testData(adult white cat)
	testData(adult jellie cat)
	testData(adult all black cat)

	setSuperTypes(cat)
	testData(tamed ocelot)
	testData(tamed baby ocelot)
	testData(tamed adult ocelot)

	setSuperTypes(cat, baby cat)
	testData(tamed baby ocelot)

	setSuperTypes(cat, adult cat)
	testData(tamed adult ocelot)

	setSuperTypes(cat, kitten, baby cat)
	testData(kitten)
	testData(tabby kitten)
	testData(black kitten)
	testData(red kitten)
	testData(siamese kitten)
	testData(british shorthair kitten)
	testData(calico kitten)
	testData(persian kitten)
	testData(ragdoll kitten)
	testData(white kitten)
	testData(jellie kitten)
	testData(all black kitten)

test "chicken data":
	setSuperTypes(chicken)
	testData(chicken)
	testData(baby chicken)
	testData(adult chicken)
	testData(chick)
	parse if running minecraft "1.21.6":
		setSuperTypes(chicken)
		testData(chicken)
		testData(warm chicken)
		testData(temperate chicken)
		testData(cold chicken)

		setSuperTypes(chicken, baby chicken)
		testData(baby chicken)
		testData(baby warm chicken)
		testData(baby temperate chicken)
		testData(baby cold chicken)

		setSuperTypes(chicken, adult chicken)
		testData(adult chicken)
		testData(adult warm chicken)
		testData(adult temperate chicken)
		testData(adult cold chicken)

		setSuperTypes(chicken, chick, baby chicken)
		testData(chick)
		testData(warm chick)
		testData(temperate chick)
		testData(cold chick)

test "cow data":
	setSuperTypes(cow)
	testData(cow)
	testData(baby cow)
	testData(adult cow)
	testData(calf)
	parse if running minecraft "1.21.6":
		setSuperTypes(cow)
		testData(cow)
		testData(warm cow)
		testData(temperate cow)
		testData(cold cow)

		setSuperTypes(cow, baby cow)
		testData(baby cow)
		testData(baby warm cow)
		testData(baby temperate cow)
		testData(baby cold cow)

		setSuperTypes(cow, adult cow)
		testData(adult cow)
		testData(adult warm cow)
		testData(adult temperate cow)
		testData(adult cold cow)

		setSuperTypes(cow, calf, baby cow)
		testData(calf)
		testData(warm calf)
		testData(temperate calf)
		testData(cold calf)

test "creeper data":
	setSuperTypes(creeper)
	testData(creeper)
	testData(powered creeper)
	testData(unpowered creeper)

test "dropped item data":
	setSuperTypes(dropped item, dropped item entity)
	testData(dropped item entity)
	testData(dropped stone)

test "enderman data":
	setSuperTypes(enderman)
	testData(enderman)
	testData(enderman holding stone)

test "falling block data":
	setSuperTypes(falling block)
	testData(falling block)
	testData(falling sand)

test "fox data":
	setSuperTypes(fox)
	testData(fox)
	testData(red fox)
	testData(snow fox)

	setSuperTypes(fox, baby fox)
	testData(baby fox)
	testData(baby red fox)
	testData(baby snow fox)

	setSuperTypes(fox, adult fox)
	testData(adult fox)
	testData(adult red fox)
	testData(adult snow fox)

	setSuperTypes(fox, fox kid, baby fox)
	testData(fox kid)
	testData(red fox kid)
	testData(snow fox kid)

test "frog data":
	setSuperTypes(frog)
	testData(frog)
	testData(warm frog)
	testData(temperate frog)
	testData(cold frog)

	setSuperTypes(frog, baby frog)
	testData(baby frog)
	testData(baby warm frog)
	testData(baby temperate frog)
	testData(baby cold frog)

	setSuperTypes(frog, adult frog)
	testData(adult frog)
	testData(adult warm frog)
	testData(adult temperate frog)
	testData(adult cold frog)

	setSuperTypes(frog, frog kid, baby frog)
	testData(frog kid)
	testData(warm frog kid)
	testData(temperate frog kid)
	testData(cold frog kid)

test "goat data":
	setSuperTypes(goat)
	testData(goat)
	testData(screaming goat)
	testData(quiet goat)

	setSuperTypes(goat, baby goat)
	testData(baby goat)
	testData(baby screaming goat)
	testData(baby quiet goat)

	setSuperTypes(goat, adult goat)
	testData(adult goat)
	testData(adult screaming goat)
	testData(adult quiet goat)

	setSuperTypes(goat, goat kid, baby goat)
	testData(goat kid)
	testData(screaming goat kid)
	testData(quiet goat kid)

test "llama data":
	setSuperTypes(llama)
	testData(llama)
	testData(creamy llama)
	testData(white llama)
	testData(brown llama)
	testData(gray llama)
	testData(trader llama)
	testData(creamy trader llama)
	testData(white trader llama)
	testData(brown trader llama)
	testData(gray trader llama)

	setSuperTypes(llama, baby llama)
	testData(baby llama)
	testData(baby creamy llama)
	testData(baby white llama)
	testData(baby brown llama)
	testData(baby gray llama)
	testData(baby trader llama)
	testData(baby creamy trader llama)
	testData(baby white trader llama)
	testData(baby brown trader llama)
	testData(baby gray trader llama)

	setSuperTypes(llama, adult llama)
	testData(adult llama)
	testData(adult creamy llama)
	testData(adult white llama)
	testData(adult brown llama)
	testData(adult gray llama)
	testData(adult trader llama)
	testData(adult creamy trader llama)
	testData(adult white trader llama)
	testData(adult brown trader llama)
	testData(adult gray trader llama)

	setSuperTypes(llama, llama cria, baby llama)
	testData(llama cria)
	testData(creamy llama cria)
	testData(white llama cria)
	testData(brown llama cria)
	testData(gray llama cria)
	testData(trader llama cria)
	testData(creamy trader llama cria)
	testData(white trader llama cria)
	testData(brown trader llama cria)
	testData(gray trader llama cria)

	setSuperTypes(trader llama)
	testData(trader llama)
	testData(creamy trader llama)
	testData(white trader llama)
	testData(brown trader llama)
	testData(gray trader llama)

	setSuperTypes(trader llama, baby trader llama)
	testData(baby trader llama)
	testData(baby creamy trader llama)
	testData(baby white trader llama)
	testData(baby brown trader llama)
	testData(baby gray trader llama)

	setSuperTypes(trader llama, adult trader llama)
	testData(adult trader llama)
	testData(adult creamy trader llama)
	testData(adult white trader llama)
	testData(adult brown trader llama)
	testData(adult gray trader llama)

	setSuperTypes(trader llama, trader llama cria, baby trader llama)
	testData(trader llama cria)
	testData(creamy trader llama cria)
	testData(white trader llama cria)
	testData(brown trader llama cria)
	testData(gray trader llama cria)

	setSuperTypes(creamy llama)
	testData(creamy llama)
	testData(baby creamy llama)
	testData(creamy llama cria)
	testData(creamy trader llama)
	testData(baby creamy trader llama)
	testData(creamy trader llama cria)

	setSuperTypes(white llama)
	testData(white llama)
	testData(baby white llama)
	testData(white llama cria)
	testData(white trader llama)
	testData(baby white trader llama)
	testData(white trader llama cria)

	setSuperTypes(brown llama)
	testData(brown llama)
	testData(baby brown llama)
	testData(brown llama cria)
	testData(brown trader llama)
	testData(baby brown trader llama)
	testData(brown trader llama cria)

	setSuperTypes(gray llama)
	testData(gray llama)
	testData(baby gray llama)
	testData(gray llama cria)
	testData(gray trader llama)
	testData(baby gray trader llama)
	testData(gray trader llama cria)

test "minecart data":
	setSuperTypes(minecart)
	testData(minecart)
	testData(regular minecart)
	testData(minecart with chest)
	testData(minecart with furnace)
	testData(minecart with hopper)
	testData(minecart with tnt)
	testData(minecart with spawner)
	testData(minecart with command block)

test "mooshroom data":
	setSuperTypes(mooshroom)
	testData(mooshroom)
	testData(red mooshroom)
	testData(brown mooshroom)

	setSuperTypes(mooshroom, baby mooshroom)
	testData(baby mooshroom)
	testData(baby red mooshroom)
	testData(baby brown mooshroom)

	setSuperTypes(mooshroom, adult mooshroom)
	testData(adult mooshroom)
	testData(adult red mooshroom)
	testData(adult brown mooshroom)

	setSuperTypes(mooshroom, mooshroom calf, baby mooshroom)
	testData(mooshroom calf)
	testData(red mooshroom calf)
	testData(brown mooshroom calf)

	setSuperTypes(mooshroom, mooshroom calf, baby mooshroom, mooshroom kid)
	testData(mooshroom kid)
	testData(red mooshroom kid)
	testData(brown mooshroom kid)

test "panda data":
	setSuperTypes(panda)
	testData(panda)
	testData(normal panda)
	testData(lazy panda)
	testData(worried panda)
	testData(playful panda)
	testData(brown panda)
	testData(weak panda)
	testData(aggressive panda)

	setSuperTypes(panda, normal panda)
	testData(normal-normal panda)
	testData(normal-lazy panda)
	testData(normal-worried panda)
	testData(normal-playful panda)
	testData(normal-brown panda)
	testData(normal-weak panda)
	testData(normal-aggressive panda)

	setSuperTypes(panda, lazy panda)
	testData(lazy-normal panda)
	testData(lazy-lazy panda)
	testData(lazy-worried panda)
	testData(lazy-playful panda)
	testData(lazy-brown panda)
	testData(lazy-weak panda)
	testData(lazy-aggressive panda)

	setSuperTypes(panda, worried panda)
	testData(worried-normal panda)
	testData(worried-lazy panda)
	testData(worried-worried panda)
	testData(worried-playful panda)
	testData(worried-brown panda)
	testData(worried-weak panda)
	testData(worried-aggressive panda)

	setSuperTypes(panda, playful panda)
	testData(playful-normal panda)
	testData(playful-lazy panda)
	testData(playful-worried panda)
	testData(playful-playful panda)
	testData(playful-brown panda)
	testData(playful-weak panda)
	testData(playful-aggressive panda)

	setSuperTypes(panda, brown panda)
	testData(brown-normal panda)
	testData(brown-lazy panda)
	testData(brown-worried panda)
	testData(brown-playful panda)
	testData(brown-brown panda)
	testData(brown-weak panda)
	testData(brown-aggressive panda)

	setSuperTypes(panda, weak panda)
	testData(weak-normal panda)
	testData(weak-lazy panda)
	testData(weak-worried panda)
	testData(weak-playful panda)
	testData(weak-brown panda)
	testData(weak-weak panda)
	testData(weak-aggressive panda)

	setSuperTypes(panda, aggressive panda)
	testData(aggressive-normal panda)
	testData(aggressive-lazy panda)
	testData(aggressive-worried panda)
	testData(aggressive-playful panda)
	testData(aggressive-brown panda)
	testData(aggressive-weak panda)
	testData(aggressive-aggressive panda)

	setSuperTypes(panda, baby panda)
	testData(baby panda)
	testData(baby normal panda)
	testData(baby lazy panda)
	testData(baby worried panda)
	testData(baby playful panda)
	testData(baby brown panda)
	testData(baby weak panda)
	testData(baby aggressive panda)

	setSuperTypes(panda, normal panda, baby panda, baby normal panda)
	testData(baby normal-normal panda)
	testData(baby normal-lazy panda)
	testData(baby normal-worried panda)
	testData(baby normal-playful panda)
	testData(baby normal-brown panda)
	testData(baby normal-weak panda)
	testData(baby normal-aggressive panda)

	setSuperTypes(panda, lazy panda, baby panda, baby lazy panda)
	testData(baby lazy-normal panda)
	testData(baby lazy-lazy panda)
	testData(baby lazy-worried panda)
	testData(baby lazy-playful panda)
	testData(baby lazy-brown panda)
	testData(baby lazy-weak panda)
	testData(baby lazy-aggressive panda)

	setSuperTypes(panda, worried panda, baby panda, baby worried panda)
	testData(baby worried-normal panda)
	testData(baby worried-lazy panda)
	testData(baby worried-worried panda)
	testData(baby worried-playful panda)
	testData(baby worried-brown panda)
	testData(baby worried-weak panda)
	testData(baby worried-aggressive panda)

	setSuperTypes(panda, playful panda, baby panda, baby playful panda)
	testData(baby playful-normal panda)
	testData(baby playful-lazy panda)
	testData(baby playful-worried panda)
	testData(baby playful-playful panda)
	testData(baby playful-brown panda)
	testData(baby playful-weak panda)
	testData(baby playful-aggressive panda)

	setSuperTypes(panda, brown panda, baby panda, baby brown panda)
	testData(baby brown-normal panda)
	testData(baby brown-lazy panda)
	testData(baby brown-worried panda)
	testData(baby brown-playful panda)
	testData(baby brown-brown panda)
	testData(baby brown-weak panda)
	testData(baby brown-aggressive panda)

	setSuperTypes(panda, weak panda, baby panda, baby weak panda)
	testData(baby weak-normal panda)
	testData(baby weak-lazy panda)
	testData(baby weak-worried panda)
	testData(baby weak-playful panda)
	testData(baby weak-brown panda)
	testData(baby weak-weak panda)
	testData(baby weak-aggressive panda)

	setSuperTypes(panda, aggressive panda, baby panda, baby aggressive panda)
	testData(baby aggressive-normal panda)
	testData(baby aggressive-lazy panda)
	testData(baby aggressive-worried panda)
	testData(baby aggressive-playful panda)
	testData(baby aggressive-brown panda)
	testData(baby aggressive-weak panda)
	testData(baby aggressive-aggressive panda)

	setSuperTypes(panda, adult panda)
	testData(adult panda)
	testData(adult normal panda)
	testData(adult lazy panda)
	testData(adult worried panda)
	testData(adult playful panda)
	testData(adult brown panda)
	testData(adult weak panda)
	testData(adult aggressive panda)

	setSuperTypes(panda, normal panda, adult panda, adult normal panda)
	testData(adult normal-normal panda)
	testData(adult normal-lazy panda)
	testData(adult normal-worried panda)
	testData(adult normal-playful panda)
	testData(adult normal-brown panda)
	testData(adult normal-weak panda)
	testData(adult normal-aggressive panda)

	setSuperTypes(panda, lazy panda, adult panda, adult lazy panda)
	testData(adult lazy-normal panda)
	testData(adult lazy-lazy panda)
	testData(adult lazy-worried panda)
	testData(adult lazy-playful panda)
	testData(adult lazy-brown panda)
	testData(adult lazy-weak panda)
	testData(adult lazy-aggressive panda)

	setSuperTypes(panda, worried panda, adult panda, adult worried panda)
	testData(adult worried-normal panda)
	testData(adult worried-lazy panda)
	testData(adult worried-worried panda)
	testData(adult worried-playful panda)
	testData(adult worried-brown panda)
	testData(adult worried-weak panda)
	testData(adult worried-aggressive panda)

	setSuperTypes(panda, playful panda, adult panda, adult playful panda)
	testData(adult playful-normal panda)
	testData(adult playful-lazy panda)
	testData(adult playful-worried panda)
	testData(adult playful-playful panda)
	testData(adult playful-brown panda)
	testData(adult playful-weak panda)
	testData(adult playful-aggressive panda)

	setSuperTypes(panda, brown panda, adult panda, adult brown panda)
	testData(adult brown-normal panda)
	testData(adult brown-lazy panda)
	testData(adult brown-worried panda)
	testData(adult brown-playful panda)
	testData(adult brown-brown panda)
	testData(adult brown-weak panda)
	testData(adult brown-aggressive panda)

	setSuperTypes(panda, weak panda, adult panda, adult weak panda)
	testData(adult weak-normal panda)
	testData(adult weak-lazy panda)
	testData(adult weak-worried panda)
	testData(adult weak-playful panda)
	testData(adult weak-brown panda)
	testData(adult weak-weak panda)
	testData(adult weak-aggressive panda)

	setSuperTypes(panda, aggressive panda, adult panda, adult aggressive panda)
	testData(adult aggressive-normal panda)
	testData(adult aggressive-lazy panda)
	testData(adult aggressive-worried panda)
	testData(adult aggressive-playful panda)
	testData(adult aggressive-brown panda)
	testData(adult aggressive-weak panda)
	testData(adult aggressive-aggressive panda)

test "parrot data":
	setSuperTypes(parrot)
	testData(parrot)
	testData(red parrot)
	testData(blue parrot)
	testData(green parrot)
	testData(cyan parrot)
	testData(gray parrot)

test "pig data":
	setSuperTypes(pig)
	testData(pig)
	testData(saddled pig)
	testData(unsaddled pig)

	setSuperTypes(pig)
	testData(baby pig)
	testData(adult pig)

	setSuperTypes(pig, baby pig)
	testData(piglet)
	parse if running minecraft "1.21.5":
		setSuperTypes(pig, warm pig)
		testData(warm pig)
		testData(warm saddled pig)
		testData(warm unsaddled pig)

		setSuperTypes(pig, temperate pig)
		testData(temperate pig)
		testData(temperate saddled pig)
		testData(temperate unsaddled pig)

		setSuperTypes(pig, cold pig)
		testData(cold pig)
		testData(cold saddled pig)
		testData(cold unsaddled pig)

		setSuperTypes(pig, baby pig)
		testData(warm baby pig)
		testData(temperate baby pig)
		testData(cold baby pig)

		setSuperTypes(pig, adult pig)
		testData(warm adult pig)
		testData(temperate adult pig)
		testData(cold adult pig)

		setSuperTypes(pig, piglet, baby pig)
		testData(warm piglet)
		testData(temperate piglet)
		testData(cold piglet)

		setSuperTypes(pig, saddled pig)
		testData(saddled warm pig)
		testData(saddled temperate pig)
		testData(saddled cold pig)

		setSuperTypes(pig, unsaddled pig)
		testData(unsaddled warm pig)
		testData(unsaddled temperate pig)
		testData(unsaddled cold pig)

test "rabbit data":
	setSuperTypes(rabbit)
	testData(rabbit)
	testData(white rabbit)
	testData(black rabbit)
	testData(black white rabbit)
	testData(brown rabbit)
	testData(gold rabbit)
	testData(salt pepper rabbit)
	testData(killer rabbit)

	setSuperTypes(rabbit, baby rabbit)
	testData(baby rabbit)
	testData(baby white rabbit)
	testData(baby black rabbit)
	testData(baby black white rabbit)
	testData(baby brown rabbit)
	testData(baby gold rabbit)
	testData(baby salt pepper rabbit)
	testData(baby killer rabbit)

	setSuperTypes(rabbit, adult rabbit)
	testData(adult rabbit)
	testData(adult white rabbit)
	testData(adult black rabbit)
	testData(adult black white rabbit)
	testData(adult brown rabbit)
	testData(adult gold rabbit)
	testData(adult salt pepper rabbit)
	testData(adult killer rabbit)

test "salmon data" when running minecraft "1.21.2":
	setSuperTypes(any salmon)
	testData(salmon)
	testData(small salmon)
	testData(medium salmon)
	testData(large salmon)

test "sheep data":
	setSuperTypes(sheep)
	testData(sheep)
	testData(unsheared sheep)
	testData(sheared sheep)

	setSuperTypes(red sheep)
	testData(red sheep)
	testData(red unsheared sheep)
	testData(red sheared sheep)

test "strider data":
	setSuperTypes(strider)
	testData(strider)
	testData(warm strider)
	testData(cold strider)

	setSuperTypes(strider, baby strider)
	testData(baby strider)
	testData(baby warm strider)
	testData(baby cold strider)

test "thrown potion data" when running minecraft "1.21.0":
	setSuperTypes(thrown potion)
	testData(thrown potion)
	testData(thrown speed potion)

test "tropical fish data":
	setSuperTypes(tropical fish)
	testData(tropical fish)
	testData(kob)
	testData(sunstreak)
	testData(snooper)
	testData(dasher)
	testData(brinely)
	testData(spotty)
	testData(flopper)
	testData(stripey)
	testData(glitter)
	testData(blockfish)
	testData(betty)
	testData(clayfish)

	setSuperTypes(tropical fish, red tropical fish)
	testData(red tropical fish)
	testData(red kob)
	testData(red sunstreak)
	testData(red snooper)
	testData(red dasher)
	testData(red brinely)
	testData(red spotty)
	testData(red flopper)
	testData(red stripey)
	testData(red glitter)
	testData(red blockfish)
	testData(red betty)
	testData(red clayfish)

	setSuperTypes(tropical fish, red tropical fish, red-blue tropical fish)
	testData(red-blue tropical fish)
	testData(red-blue kob)
	testData(red-blue sunstreak)
	testData(red-blue snooper)
	testData(red-blue dasher)
	testData(red-blue brinely)
	testData(red-blue spotty)
	testData(red-blue flopper)
	testData(red-blue stripey)
	testData(red-blue glitter)
	testData(red-blue blockfish)
	testData(red-blue betty)
	testData(red-blue clayfish)

test "villager data":
	setSuperTypes(villager)
	testData(villager)
	testData(jobless villager)
	testData(armorer)
	testData(cartographer)
	testData(cleric)
	testData(fisherman)
	testData(fletcher)
	testData(mason)
	testData(shepherd)
	testData(toolsmith)
	testData(weaponsmith)
	testData(farmer)
	testData(librarian)
	testData(butcher)
	testData(nitwit)

	setSuperTypes(villager, baby villager)
	testData(baby villager)
	testData(baby jobless villager)
	testData(baby armorer)
	testData(baby cartographer)
	testData(baby cleric)
	testData(baby fisherman)
	testData(baby fletcher)
	testData(baby mason)
	testData(baby shepherd)
	testData(baby toolsmith)
	testData(baby weaponsmith)
	testData(baby farmer)
	testData(baby librarian)
	testData(baby butcher)
	testData(baby nitwit)

	setSuperTypes(villager, adult villager)
	testData(adult villager)
	testData(adult jobless villager)
	testData(adult armorer)
	testData(adult cartographer)
	testData(adult cleric)
	testData(adult fisherman)
	testData(adult fletcher)
	testData(adult mason)
	testData(adult shepherd)
	testData(adult toolsmith)
	testData(adult weaponsmith)
	testData(adult farmer)
	testData(adult librarian)
	testData(adult butcher)
	testData(adult nitwit)

test "wolf data":
	setSuperTypes(wolf)
	testData(wolf)
	testData(dog)
	testData(tamed wolf)
	testData(wild wolf)
	testData(angry wolf)
	testData(peaceful wolf)

	setSuperTypes(wolf, baby wolf)
	testData(baby wolf)
	testData(baby dog)
	testData(tamed baby wolf)
	testData(pup)
	testData(wild baby wolf)
	testData(angry baby wolf)
	testData(peaceful baby wolf)

	setSuperTypes(wolf, adult wolf)
	testData(adult wolf)
	testData(adult dog)
	testData(tamed adult wolf)
	testData(wild adult wolf)
	testData(angry adult wolf)
	testData(peaceful adult wolf)

	setSuperTypes(wolf, wolf color red)
	testData(wolf color red)
	testData(dog color red)
	testData(tamed wolf color red)
	testData(wild wolf color red)
	testData(angry wolf color red)
	testData(peaceful wolf color red)

	setSuperTypes(wolf color red, baby wolf color red)
	testData(baby wolf color red)
	testData(baby dog color red)
	testData(tamed baby wolf color red)
	testData(pup color red)
	testData(wild baby wolf color red)
	testData(angry baby wolf color red)
	testData(peaceful baby wolf color red)

	setSuperTypes(wolf color red, adult wolf color red)
	testData(adult wolf color red)
	testData(adult dog color red)
	testData(tamed adult wolf color red)
	testData(wild adult wolf color red)
	testData(angry adult wolf color red)
	testData(peaceful adult wolf color red)

	parse if running minecraft "1.20.6":
		setSuperTypes(wolf)
		testData(ashen wolf)
		testData(black wolf)
		testData(chestnut wolf)
		testData(pale wolf)
		testData(rusty wolf)
		testData(snowy wolf)
		testData(spotted wolf)
		testData(striped wolf)
		testData(woods wolf)

		setSuperTypes(wolf, baby wolf)
		testData(baby ashen wolf)
		testData(baby black wolf)
		testData(baby chestnut wolf)
		testData(baby pale wolf)
		testData(baby rusty wolf)
		testData(baby snowy wolf)
		testData(baby spotted wolf)
		testData(baby striped wolf)
		testData(baby woods wolf)

		setSuperTypes(wolf, adult wolf)
		testData(adult ashen wolf)
		testData(adult black wolf)
		testData(adult chestnut wolf)
		testData(adult pale wolf)
		testData(adult rusty wolf)
		testData(adult snowy wolf)
		testData(adult spotted wolf)
		testData(adult striped wolf)
		testData(adult woods wolf)

		setSuperTypes(wolf, ashen wolf)
		testData(ashen wolf)
		testData(ashen dog)
		testData(tamed ashen wolf)
		testData(wild ashen wolf)
		testData(angry ashen wolf)
		testData(peaceful ashen wolf)

		setSuperTypes(wolf, ashen wolf, baby wolf, baby ashen wolf)
		testData(baby ashen wolf)
		testData(baby ashen dog)
		testData(tamed baby ashen wolf)
		testData(ashen pup)
		testData(wild baby ashen wolf)
		testData(angry baby ashen wolf)
		testData(peaceful baby ashen wolf)

		setSuperTypes(wolf, ashen wolf, wolf color red, ashen wolf color red)
		testData(ashen wolf color red)
		testData(ashen dog color red)
		testData(tamed ashen wolf color red)
		testData(wild ashen wolf color red)
		testData(angry ashen wolf color red)
		testData(peaceful ashen wolf color red)

		setSuperTypes(wolf, ashen wolf, baby wolf, baby ashen wolf, wolf color red, ashen wolf color red, baby wolf color red, baby ashen wolf color red)
		testData(baby ashen wolf color red)
		testData(baby ashen dog color red)
		testData(tamed baby ashen wolf color red)
		testData(ashen pup color red)
		testData(wild baby ashen wolf color red)
		testData(angry baby ashen wolf color red)
		testData(peaceful baby ashen wolf color red)

test "zombie villager data":
	setSuperTypes(zombie villager)
	testData(zombie villager)
	testData(normal zombie villager)
	testData(zombie farmer)
	testData(zombie librarian)
	testData(zombie butcher)
	testData(zombie nitwit)
	testData(zombie armorer)
	testData(zombie cartographer)
	testData(zombie cleric)
	testData(zombie fisherman)
	testData(zombie fletcher)
	testData(zombie mason)
	testData(zombie shepherd)
	testData(zombie toolsmith)
	testData(zombie weaponsmith)

	setSuperTypes(zombie villager, baby zombie villager)
	testData(baby zombie villager)
	testData(baby normal zombie villager)
	testData(baby zombie farmer)
	testData(baby zombie librarian)
	testData(baby zombie butcher)
	testData(baby zombie nitwit)
	testData(baby zombie armorer)
	testData(baby zombie cartographer)
	testData(baby zombie cleric)
	testData(baby zombie fisherman)
	testData(baby zombie fletcher)
	testData(baby zombie mason)
	testData(baby zombie shepherd)
	testData(baby zombie toolsmith)
	testData(baby zombie weaponsmith)

	setSuperTypes(zombie villager, adult zombie villager)
	testData(adult zombie villager)
	testData(adult normal zombie villager)
	testData(adult zombie farmer)
	testData(adult zombie librarian)
	testData(adult zombie butcher)
	testData(adult zombie nitwit)
	testData(adult zombie armorer)
	testData(adult zombie cartographer)
	testData(adult zombie cleric)
	testData(adult zombie fisherman)
	testData(adult zombie fletcher)
	testData(adult zombie mason)
	testData(adult zombie shepherd)
	testData(adult zombie toolsmith)
	testData(adult zombie weaponsmith)

test "display data":
	setSuperTypes(display, display entity)
	testData(display)
	testData(text display)
	testData(block display)
	testData(block display entity)
	testData(block display of stone)
	testData(stone block display)
	testData(item display)
	testData(item display entity)
	testData(item display of stone)
	testData(stone item display)

	setSuperTypes(block display, block display entity)
	testData(block display)
	testData(block display of sand)
	testData(block display entity of sand)
	testData(sand block display)
	testData(sand block display entity)

	setSuperTypes(item display, item display entity)
	testData(item display)
	testData(item display of bedrock)
	testData(item display entity of bedrock)
	testData(bedrock item display)
	testData(bedrock item display entity)

# TODO: simple entity data
