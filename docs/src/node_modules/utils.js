export async function setupColors() {
	const elements = document.getElementsByClassName('skript-code');
	for (let element of elements) {
		element.innerHTML = element.innerHTML.split('\n').map(line => line
			.replace(/(#.*)/gmui, '<span style="color: #63ba00">$1</span>')
			.replace(/(%(-)?(\w+)%)/gmui, '<span style="color: #42cad4"><a href="/documentation/types#$3">$1</a></span>')
			.replace(/\b(set|delete|clear|remove|add|to)\b/gmui, '<span style="color: #5193fc">$1</span>')
			.replace(/\b(player)\b/gmui, '<span style="color: #5193fc">$1</span>')
			.replace(/(with|broadcast|send|message|kick)( .+)/gmui, '<span style="color: #5193fc">$1</span> $2')
			.replace(/\b(on|cancel event|command|function|return)\b/gmui, '<span style="color: #db00a1">$1</span>')
			.replace(/\b(if|else|is)\b/gmui, '<span style="color: #db00a1">$1</span>')
			.replace(/\b(loop|while|chance)\b/gmui, '<span style="color: #db00a1">$1</span>')
			.replace(/(\{_?[\w\.::]+\})/gmui, '<span style="color: #c90610">$1</span>')
			.replace(/(premission|permission message|usage|executable by|aliases|cooldown|description|trigger):/gmui, '<span style="color: #c90610">$1:</span>')
			.replace(/(<\w+>):/gmui, '<span style="color: #5606a1">$1</span>')
			.replace(/(%-?\w+%):/gmui, '<span style="color: #edf502">$1</span>')
		).join('\n')
	}
}

export async function setupScroll() {
	const elements = document.getElementsByTagName('a');
	for (let element of elements) {
		if (element.getAttribute('href').match(/\#.+$/gm)) {
			element.addEventListener('click', async (e) => {
				e.preventDefault();
				window.location.href = window.location.href.replace(/#.+$/gmui, '') + element.getAttribute('href');
			})
		}
	}
}

export async function clicked(target) {
	const isActive = document.getElementsByClassName('is-active')[0];
	if (isActive) isActive.classList.remove('is-active');
	target.target.classList.add('is-active');
}

export async function search(searchValue) {
	const cards = document.getElementsByClassName('card');
	for (let card of cards) {

		const title = card.getElementsByClassName('card-header-title')[0].innerText;
		const description = card.getElementsByClassName('card-content')[0].getElementsByTagName('p')[0].innerText;
		const pattern = card.getElementsByClassName('card-content')[0].getElementsByTagName('p')[1].innerText;
		
		const filters = [title, pattern];
		
		const result = filters.filter(filter => filter.toUpperCase().indexOf(searchValue.toUpperCase()) > -1)
		
		if (result.length > 0) {
			card.parentElement.style.display = "";
		} else {
			card.parentElement.style.display = "none";
		}

	}
}

export function firstLetterUpperCase(text) {
	if (typeof text !== 'string') return ''
	return text.charAt(0).toUpperCase() + text.slice(1)
}